---
// Projects showcase component with filtering and modern design
import { projects, categories, type Project } from '../data/projects';
---

<section id="projects" class="py-20 bg-dark-50 relative overflow-hidden">
  <!-- Background decoration -->
  <div class="absolute top-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-accent-500/50 to-transparent"></div>

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold text-dark-900 mb-4">
        Featured <span class="gradient-text">Projects</span>
      </h2>
      <p class="text-xl text-dark-600 max-w-3xl mx-auto mb-8">
        Explore my portfolio of cutting-edge ML/AI projects, from research papers to production systems.
      </p>

      <!-- Filter and Search -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-8">
        <!-- Search -->
        <div class="relative">
          <input
            type="text"
            id="project-search"
            placeholder="Search projects..."
            class="w-80 px-4 py-3 bg-white border border-dark-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
          />
          <svg class="absolute right-3 top-3.5 w-5 h-5 text-dark-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
          </svg>
        </div>

        <!-- Category Filter -->
        <div class="flex flex-wrap gap-2 justify-center">
          <button class="filter-btn active" data-category="All">All Projects</button>
          {categories.slice(1).map(category => (
            <button class="filter-btn" data-category={category}>{category}</button>
          ))}
        </div>
      </div>
    </div>

    <!-- Projects Grid -->
    <div id="projects-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {projects.map((project, index) => (
        <div
          class={`project-card ${project.featured ? 'featured' : ''}`}
          data-category={project.category}
          data-title={project.title.toLowerCase()}
          data-technologies={project.technologies.join(' ').toLowerCase()}
          style={`animation-delay: ${index * 0.1}s`}
        >
          <!-- Project Image -->
          <div class="relative overflow-hidden rounded-t-lg bg-gradient-to-br from-primary-500/10 to-accent-500/10 h-48 flex items-center justify-center">
            <!-- Placeholder for project screenshot -->
            <div class="text-center text-dark-500">
              <svg class="w-16 h-16 mx-auto mb-2 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              <p class="text-sm font-medium">{project.title}</p>
            </div>

            <!-- Featured Badge -->
            {project.featured && (
              <div class="absolute top-4 left-4 bg-primary-500 text-white px-3 py-1 rounded-full text-xs font-medium">
                Featured
              </div>
            )}

            <!-- Status Badge -->
            <div class={`absolute top-4 right-4 px-3 py-1 rounded-full text-xs font-medium ${
              project.status === 'completed' ? 'bg-green-500 text-white' :
              project.status === 'in-progress' ? 'bg-yellow-500 text-white' :
              'bg-blue-500 text-white'
            }`}>
              {project.status === 'completed' ? 'Completed' :
               project.status === 'in-progress' ? 'In Progress' :
               'Published'}
            </div>

            <!-- Overlay with links -->
            <div class="absolute inset-0 bg-black/60 opacity-0 hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-4">
              {project.githubUrl && (
                <a
                  href={project.githubUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="bg-white/20 backdrop-blur-sm p-3 rounded-full hover:bg-white/30 transition-colors"
                  aria-label="View GitHub Repository"
                >
                  <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                  </svg>
                </a>
              )}
              {project.liveUrl && (
                <a
                  href={project.liveUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="bg-white/20 backdrop-blur-sm p-3 rounded-full hover:bg-white/30 transition-colors"
                  aria-label="View Live Demo"
                >
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                  </svg>
                </a>
              )}
            </div>
          </div>

          <!-- Project Content -->
          <div class="p-6 bg-white">
            <div class="flex items-center justify-between mb-3">
              <span class="px-3 py-1 bg-primary-100 text-primary-700 rounded-full text-xs font-medium">
                {project.category}
              </span>
              <span class="text-sm text-dark-500">{project.year}</span>
            </div>

            <h3 class="text-xl font-bold text-dark-900 mb-3 line-clamp-2">
              {project.title}
            </h3>

            <p class="text-dark-600 mb-4 line-clamp-3">
              {project.description}
            </p>

            <!-- Technologies -->
            <div class="flex flex-wrap gap-1 mb-4">
              {project.technologies.slice(0, 4).map(tech => (
                <span class="px-2 py-1 bg-dark-100 text-dark-700 rounded text-xs">
                  {tech}
                </span>
              ))}
              {project.technologies.length > 4 && (
                <span class="px-2 py-1 bg-dark-100 text-dark-700 rounded text-xs">
                  +{project.technologies.length - 4} more
                </span>
              )}
            </div>

            <!-- Action Button -->
            <a href={`/projects/${project.id}`} class="block w-full text-center bg-dark-900 text-white py-2 rounded-lg hover:bg-dark-800 transition-colors text-sm font-medium">
              View Details
            </a>
          </div>
        </div>
      ))}
    </div>

    <!-- Load More Button -->
    <div class="text-center mt-12">
      <button id="load-more" class="bg-primary-500 hover:bg-primary-600 text-white px-8 py-3 rounded-lg font-medium transition-colors">
        Load More Projects
      </button>
    </div>
  </div>
</section>

<script>
  // Project filtering and search functionality
  const searchInput = document.getElementById('project-search') as HTMLInputElement;
  const filterButtons = document.querySelectorAll('.filter-btn');
  const projectCards = document.querySelectorAll('.project-card');
  const loadMoreBtn = document.getElementById('load-more')!;

  let visibleProjects = 9;
  let currentCategory = 'All';

  // Search functionality
  searchInput?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    filterProjects(searchTerm, currentCategory);
  });

  // Category filtering
  filterButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      filterButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      currentCategory = btn.getAttribute('data-category') || 'All';
      filterProjects(searchInput?.value?.toLowerCase() || '', currentCategory);
    });
  });

  function filterProjects(searchTerm: string, category: string) {
    let visibleCount = 0;

    projectCards.forEach((card, index) => {
      const title = card.getAttribute('data-title') || '';
      const technologies = card.getAttribute('data-technologies') || '';
      const cardCategory = card.getAttribute('data-category') || '';

      const matchesSearch = title.includes(searchTerm) || technologies.includes(searchTerm);
      const matchesCategory = category === 'All' || cardCategory === category;

      if (matchesSearch && matchesCategory) {
        card.classList.remove('hidden');
        visibleCount++;
      } else {
        card.classList.add('hidden');
      }
    });

    // Update load more button
    loadMoreBtn.style.display = visibleCount > visibleProjects ? 'block' : 'none';
  }

  // Load more functionality
  loadMoreBtn.addEventListener('click', () => {
    visibleProjects += 6;
    filterProjects(searchInput?.value?.toLowerCase() || '', currentCategory);
  });

  // Initial filter setup
  filterProjects('', 'All');
</script>

<style>
  .filter-btn {
    @apply px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 border;
  }

  .filter-btn:not(.active) {
    @apply bg-white text-dark-600 border-dark-200 hover:bg-dark-50 hover:border-primary-300;
  }

  .filter-btn.active {
    @apply bg-primary-500 text-white border-primary-500;
  }

  .project-card {
    @apply bg-white rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 animate-fade-in opacity-0;
  }

  .project-card:not(.hidden) {
    opacity: 1;
  }

  .featured {
    @apply ring-2 ring-primary-500/20;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .animate-fade-in {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
